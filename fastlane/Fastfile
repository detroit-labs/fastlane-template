fastlane_version "2.1.0"

default_platform :ios

platform :ios do

  before_all do
    xcversion(version: ENV["XCODE_VERSION"] || '~> 8.2.0')
    if !(ENV["SKIP_COCOAPODS"] || false) 
      cocoapods(silent: true, repo_update: true)
    end
  end
  
  after_all do
    cleanup
  end
  
  desc "Runs all the tests."
  lane :runTests do
    scan(
      configuration: "Debug",
      output_types: "junit",
      device: ENV["DEVICE"] || 'iPhone 7 (10.2)',
    )
  end

  desc "Sets the version number to the given version or, if none is given, increments it."
  lane :incrementBuildNumber do |options|
    if options[:build] == nil
      increment_build_number
    else
      increment_build_number(build_number: options[:build])
    end
  end

  desc "Build the archive and ipa with options (configuration (Release), include_bitcode (false), export_method (enterprise))."
  lane :build do |options|
    options[:configuration] ||= "Release"
    options[:include_bitcode] ||= false
    options[:export_method] ||= "enterprise"
    
    installProfiles
    
    gym(
      configuration: options[:configuration],
      include_bitcode: options[:include_bitcode],
      export_method: options[:export_method]
    )
  end
  
  desc "Upload a local IPA to Crashlytics with (group)."
  lane :uploadToCrashlytics do |options|
    raise "uploadToCrashlytics: A Crashlytics group must be passed as an option." unless options[:group]
    
    crashlytics(
      crashlytics_path: './Pods/Crashlytics/',
      groups: options[:group],
      notifications: 'true'
    )
  end
  
  desc "Build and upload to Crashlytics with (configuration (Release)), (include_bitcode (false)), (export_method (enterprise)), and (group)."
  lane :beta do |options|
    options[:configuration] ||= "Release"
    options[:include_bitcode] ||= false
    options[:export_method] ||= "enterprise"
    
    raise "beta: A Crashlytics group must be passed as an option." unless options[:group]
    
    build(configuration: options[:configuration], include_bitcode: options[:include_bitcode], export_method: options[:export_method])
    
    uploadToCrashlytics(group: options[:group])
  end
  
  desc "Deletes the archive generated by gym."
  lane :cleanupArchive do
    if "#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}" != ""
      sh "rm -r \"#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}\""
    end
  end
  
  # Custom actions
  
  desc "Builds and uploads to Crashlytics a QA build."
  lane :betaQA do
    incrementBuildNumber
    
    raise "betaQA: A Crashlytics group must be provided through the CRASHLYTICS_QA_GROUP environment variable." unless ENV["CRASHLYTICS_QA_GROUP"]
    
    beta(group: ENV["CRASHLYTICS_QA_GROUP"])
    
    commit_version_bump(message: "Automatically bumping build number to #{lane_context[SharedValues::BUILD_NUMBER]}.")
    push_to_git_remote
  end
  
  desc "Cleanup simulator"
  lane :cleanup do
    # kill simulator
    sh "killall Simulator || :"
    # kill SimulatorService
    sh "killall -9 com.apple.CoreSimulator.CoreSimulatorService || :"
    
    cleanupArchive
  end
  
end

desc "Installs any provisioning profiles in $PROFILE_DIRECTORY, relative to fastlane's execution path."
lane :installProfiles do
  raise "installProfiles: PROFILE_DIRECTORY environment variable required." unless ENV["PROFILE_DIRECTORY"]
  
  Dir.glob("#{ENV["PROFILE_DIRECTORY"]}/*.mobileprovision") do |profile|
    FastlaneCore::ProvisioningProfile.install(profile)
  end
end
