fastlane_version "2.105.0"

default_platform :ios

platform :ios do

  before_all do
    installKeychainsIfPossible
    xcversion(version: ENV["XCODE_VERSION"] || '~> 10.0')
    if !ENV["SKIP_COCOAPODS"]
      cocoapods(silent: true, try_repo_update_on_error: true)
    end
  end
  
  after_all do
    cleanup
    removeKeychainsIfPossible
  end
  
  desc "Runs all the tests."
  lane :runTests do
    scan(output_types: "junit",
      device: ENV["DEVICE"] || 'iPhone XS (12.0)'
    )
  end

  desc "Sets the version number to the given version or, if none is given, increments it."
  lane :incrementBuildNumber do |options|
    if options[:build].nil?
      increment_build_number
    else
      increment_build_number(build_number: options[:build])
    end
  end

  desc "Build the archive and ipa with options (configuration (Release), include_bitcode (false), export_method (enterprise))."
  lane :build do |options|
    options[:configuration] ||= "Release"
    options[:include_bitcode] ||= false
    options[:export_method] ||= "enterprise"
    
    installProfiles
    
    gym(
      configuration: options[:configuration],
      include_bitcode: options[:include_bitcode],
      export_method: options[:export_method]
    )
  end
  
  desc "Upload a local IPA to Crashlytics with (group)."
  lane :uploadToCrashlytics do |options|
    raise "uploadToCrashlytics: A Crashlytics group must be passed as an option." unless options[:group]
    
    if options[:generate_changelog] == true 
      changelog_from_git_commits
    end
    
    crashlytics(
      groups: options[:group],
      notifications: 'true'
    )
  end

  desc "Build and upload to Crashlytics with (configuration (Release)), (include_bitcode (false)), (export_method (enterprise)), and (group)."
  lane :beta do |options|
    options[:configuration] ||= "Release"
    options[:include_bitcode] ||= false
    options[:export_method] ||= "enterprise"
    options[:generate_changelog] ||= false

    raise "beta: A Crashlytics group must be passed as an option." unless options[:group]

    build(configuration: options[:configuration], include_bitcode: options[:include_bitcode], export_method: options[:export_method])

    uploadToCrashlytics(group: options[:group], generate_changelog: options[:generate_changelog])
  end
  
  # Custom actions
  
  desc "Builds and uploads to Crashlytics a QA build."
  lane :betaQA do
    incrementBuildNumber
    
    raise "betaQA: A Crashlytics group must be provided through the CRASHLYTICS_QA_GROUP environment variable." unless ENV["CRASHLYTICS_QA_GROUP"]
    
    beta(group: ENV["CRASHLYTICS_QA_GROUP"])
    
    commit_version_bump(message: "Automatically bumping build number to #{lane_context[SharedValues::BUILD_NUMBER]}.")
    push_to_git_remote
  end
  
  desc "Deletes the archive generated by gym."
  lane :cleanupArchive do
    if "#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}" != ""
      sh "rm -r \"#{File.dirname(lane_context[SharedValues::XCODEBUILD_ARCHIVE])}\""
    end
  end
  
  desc "Kills the simulator and background process."
  lane :cleanupSimulator do
    # kill simulator
    sh "killall Simulator || :"
    # kill SimulatorService
    sh "killall -9 com.apple.CoreSimulator.CoreSimulatorService || :"
  end
  
  desc "Cleanup simulator and build archives."
  lane :cleanup do
    cleanupSimulator
    cleanupArchive
  end
  
end

desc "Installs any provisioning profiles in $PROFILE_DIRECTORY, relative to Fastlane's execution path."
lane :installProfiles do
  raise "installProfiles: PROFILE_DIRECTORY environment variable required." unless ENV["PROFILE_DIRECTORY"]
  
  Dir.glob("#{ENV["PROFILE_DIRECTORY"]}/*.mobileprovision") do |profile|
    FastlaneCore::ProvisioningProfile.install(profile)
  end
end

desc "Updates project dependencies in Bundler and CocoaPods, then sends a pull request if there are changes"
lane :updateDependencies do
    fastlane_require 'fastlane-plugin-git_status'
    xcversion(version: ENV["XCODE_VERSION"] || '~> 10.0')
    bundle_update
    cocoapods_update
    sendUpdatePullRequest unless git_status(path: ["./Gemfile.lock", "./Podfile.lock"]).empty?
end

desc "Sends a pull request with the current changes to dependencies"
lane :sendUpdatePullRequest do
    fastlane_require 'fastlane-plugin-git_status'

    branchname = ENV["UPDATE_DEPENDENCIES_BRANCH"]

    create_git_branch(
      branchname: branchname
    )

    checkout_git_branch(
      branchname: branchname
    )

    git_commit(
      path: ["./Gemfile.lock", "./Podfile.lock"],
      message: "Update dependencies"
    )

    push_to_git_remote(
      remote: "origin",
      local_branch: branchname,
      remote_branch: branchname,
      force: true,
      tags: false
    )

    create_pull_request(
      api_token: ENV["GITHUB_TOKEN"],
      repo: ENV["GITHUB_REPO"],
      head: branchname,
      base: "master",
      title: "Update Dependencies"
    )
end

desc "Installs the DL and project keychains if provided. This is a transitional API that should be removed once all projects move to keychain injections."
lane :installKeychainsIfPossible
  if ENV["DL_KEYCHAIN_PATH"]
    UI.message("Installing DL keychain...")
    installDLKeychain
  end
  
  if ENV["PROJECT_KEYCHAIN_NAME"]
    UI.message("Installing project keychain...")
    installProjectKeychain
  end
end

desc "Removes the DL and project keychains if provided. This is a transitional API that should be removed once all projects move to keychain injections."
lane :removeKeychainsIfPossible
  if ENV["DL_KEYCHAIN_PATH"]
    UI.message("Removing DL keychain...")
    removeDLKeychain
  end
  
  if ENV["PROJECT_KEYCHAIN_NAME"]
    UI.message("Removing project keychain...")
    removeProjectKeychain
  end
end

desc "Installs the DL keychain. Must provide path (or DL_KEYCHAIN_PATH) and password (or DL_KEYCHAIN_PASSWORD) parameters."
lane :installDLKeychain do |options|
  path = options[:path] ||= ENV["DL_KEYCHAIN_PATH"]
  password = options[:password] ||= ENV["DL_KEYCHAIN_PASSWORD"]
  
  raise "installDLKeychain requires a path parameter or DL_KEYCHAIN_PATH to be set." unless path
  raise "installDLKeychain requires a password parameter or DL_KEYCHAIN_PASSWORD to be set." unless password
  
  installKeychain(path: path, password: password)
end

desc "Installs the project keychain from the root of the project. Must provide name (or PROJECT_KEYCHAIN_NAME), no extension, and password (or PROJECT_KEYCHAIN_PASSWORD) parameters."
lane :installProjectKeychain do |options|
  name = options[:name] ||= ENV["PROJECT_KEYCHAIN_NAME"]
  password = options[:password] ||= ENV["PROJECT_KEYCHAIN_PASSWORD"]
  
  raise "installProjectKeychain requires a name paramter or PROJECT_KEYCHAIN_NAME to be set." unless name
  raise "installProjectKeychain requires a password paramter or PROJECT_KEYCHAIN_PASSWORD to be set." unless password
  
  path = File.join(File.expand_path("..", Dir.pwd), "#{name}.keychain")
  installKeychain(path: path, password: password)
end

desc "Installs a keychain by first copying it. Requires the keychain file path and password parameters."
lane :installKeychain do |options|
  path = options[:path]
  password = options[:password]
  
  raise "installKeychain requires a path parameter." unless path
  raise "installKeychain requires a password parameter." unless password
  
  name = File.basename(path, File.extname(path))
  copy_name = "#{name}Copy.keychain"
  
  Dir.chdir("..") do
    UI.message("Copying keychain named #{name} to #{copy_name}...")
    FileUtils.cp(path, copy_name)
    UI.message("Unlocking keychain named #{copy_name}...")
    unlock_keychain(path: File.join(Dir.pwd, copy_name), password: password)
  end
end

desc "Remove the Detroit Labs keychain. Requires the DL keychain path, or for DL_KEYCHAIN_PATH to be set."
lane :removeDLKeychain do |options|
  path = options[:path] ||= ENV["DL_KEYCHAIN_PATH"]
  
  raise "removeDLKeychain requires path parameter or DL_KEYCHAIN_PATH to be set." unless path
  
  name = File.basename(path, File.extname(path))
  removeKeychain(name: name)
end

desc "Remove the project keychain. Requires the project keychain name, or for PROJECT_KEYCHAIN_NAME to be set."
lane :removeProjectKeychain do |options|
  name = options[:name] ||= ENV["PROJECT_KEYCHAIN_NAME"]
  
  raise "removeProjectKeychain requires name parameter or PROJECT_KEYCHAIN_NAME to be set." unless name
  
  removeKeychain(name: name)
end

desc "Removes a keychain by name by removing a keychain named {name}Copy."
lane :removeKeychain do |options|
  name = options[:name]
  
  raise "removeKeychain requires a name." unless name
  
  copy_name = "#{name}Copy"
  
  UI.message("Deleting keychain named #{copy_name}...")
  delete_keychain(name: copy_name)
end
