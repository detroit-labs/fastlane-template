platform :ios do

  desc "Prepare the Xcode application and Firebase Crashlytics."
  desc "#### Environment Variables"
  desc " * **`XCODE_VERSION`**: The Xcode application version. Required."
  private_lane :prepareXcode do
    version = ENV["XCODE_VERSION"]

    raise "prepareXcode: The Xcode application version environment variable is required. (XCODE_VERSION)" unless version

    xcodes(
      version: version,
      select_for_current_build_only: true
    )

    populateCrashlyticsSymbolUploadPath
  end

  desc "Generate Crashlytics symbol upload path from module name for Swift Package Manager usage."
  desc "#### Environment Variables"
  desc " * **`GYM_SCHEME`**: The project's scheme. Required."
  private_lane :populateCrashlyticsSymbolUploadPath do |options|
    scheme = ENV["GYM_SCHEME"]

    raise "populateCrashlyticsSymbolUploadPath: The project's scheme environment variable is required. (GYM_SCHEME)" unless scheme

    derived_data_path = Fastlane::Actions::ClearDerivedDataAction
      .available_options[0]
      .default_value
      .gsub('~', Dir.home)
    glob_path = "#{derived_data_path}/#{scheme}-*/SourcePackages/checkouts/firebase-ios-sdk/Crashlytics/upload-symbols"

    ENV["FL_UPLOAD_SYMBOLS_TO_CRASHLYTICS_BINARY_PATH"] = Dir.glob(glob_path)[0]
  end

  desc "Cleanup Xcode simulator and build archives."
  private_lane :cleanupXcode do
    cleanupXcodeSimulator
    cleanupXcodeArchive
  end

  desc "Deletes the Xcode archive generated by gym."
  private_lane :cleanupXcodeArchive do
    archive = "#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}"
    
    if archive != ""
      sh "rm -r \"#{File.dirname(archive)}\" || :"
    end
  end

  desc "Shuts down and kills the Xcode simulator and background process."
  private_lane :cleanupXcodeSimulator do
    # attempt to quit simulators nicely
    sh "xcrun simctl shutdown booted"
    # kill simulator
    sh "killall Simulator || :"
    # kill SimulatorService
    sh "killall -9 com.apple.CoreSimulator.CoreSimulatorService || :"
  end

end
